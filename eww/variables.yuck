;; Variables for system info
(defvar clock-format "%H:%M")
(defvar date-format "%a %d %b")
(defvar show-seconds false)

;; Polls for system information
(defpoll current-workspace :interval "100ms" `hyprctl activeworkspace -j | jq -r '.id'`)
(defpoll workspaces :interval "100ms" `hyprctl workspaces -j | jq -r 'map(select(.id > 0)) | sort_by(.id) | .[].id'`)
(defpoll window-title :interval "100ms" `hyprctl activewindow -j | jq -r '.title // "" | if length > 25 then .[0:25] + "..." else . end'`)
(defpoll show-panel :interval "200ms" `hyprctl activewindow -j | jq -r 'if .class == "" or .class == null then "true" else "false" end'`)
(defpoll current-lang :interval "100ms" `hyprctl devices -j | jq -r '.keyboards[] | select(.name | contains("keyboard")) | .active_keymap // "us"'`)
(defpoll volume :interval "100ms" `pactl get-sink-volume @DEFAULT_SINK@ | grep -Po '[0-9]+(?=%)' | head -1 || echo "0"`)
(defpoll volume-muted :interval "100ms" `pactl get-sink-mute @DEFAULT_SINK@ | grep -q "yes" && echo "true" || echo "false"`)
(defpoll brightness :interval "100ms" `if command -v brightnessctl >/dev/null 2>&1; then current=$(brightnessctl get); max=$(brightnessctl max); awk "BEGIN {print int($current * 100 / $max)}"; else current=$(cat /sys/class/backlight/*/brightness 2>/dev/null | head -n1); max=$(cat /sys/class/backlight/*/max_brightness 2>/dev/null | head -n1); if [ -n "$current" ] && [ -n "$max" ] && [ "$max" -gt 0 ]; then awk "BEGIN {print int($current * 100 / $max)}"; else echo "50"; fi; fi`)
(defpoll cpu-usage :interval "1s" `top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print int(100 - $1)}'`)
(defpoll cpu-core-usage :interval "1s" :initial "[0,0,0,0,0,0,0,0,0,0,0,0,0,0]" 
  "/home/jobe/git/dotfiles/eww/scripts/cpu-core-usage.sh")
(defpoll memory-usage :interval "1s" `free | grep Mem | awk '{print int($3/$2 * 100)}'`)
(defpoll memory-total :interval "10s" `free -h | grep Mem | awk '{print $2}'`)
(defpoll memory-used :interval "1s" `free -h | grep Mem | awk '{print $3}'`)
(defpoll temperature :interval "1s" "/home/jobe/git/dotfiles/eww/scripts/temp-average.sh")
(defpoll core-temps :interval "1s" :initial "[50,50,50,50,50,50,50,50,50,50,50,50,50,50]" 
  "/home/jobe/git/dotfiles/eww/scripts/core-temps.sh")
(defpoll battery-capacity :interval "10s" `cat /sys/class/power_supply/BAT*/capacity 2>/dev/null | head -n1 || echo "100"`)
(defpoll battery-status :interval "10s" `cat /sys/class/power_supply/BAT*/status 2>/dev/null | head -n1 || echo "Unknown"`)
(defpoll network-status :interval "1s" `if ping -c 1 8.8.8.8 &> /dev/null; then echo "connected"; else echo "disconnected"; fi`)
(defpoll network-interface :interval "5s" `ip route | grep default | awk '{print $5}' | head -n1`)
(defpoll wifi-network :interval "5s" `nmcli -t -f NAME connection show --active | head -1 || echo "No Network"`)
(defpoll network-ip :interval "5s" `ip route get 8.8.8.8 | grep -oP 'src \K\S+' | head -n1`)
(defpoll bluetooth-status :interval "1s" `if command -v bluetoothctl >/dev/null 2>&1 && bluetoothctl show | grep -q "Powered: yes"; then echo "on"; else echo "off"; fi`)
(defpoll bluetooth-connected :interval "5s" `if command -v bluetoothctl >/dev/null 2>&1; then bluetoothctl devices Connected | wc -l; else echo "0"; fi`)
(defpoll bluetooth-devices :interval "5s" "/home/jobe/git/dotfiles/eww/scripts/bluetooth-devices-with-battery.sh")
(defpoll bluetooth-devices-list :interval "5s" `bash -c 'devices=$(/home/jobe/git/dotfiles/eww/scripts/bluetooth-devices-with-battery.sh); echo "[$( echo "$devices" | sed "s/,/\",\"/g" | sed "s/^/\"/" | sed "s/$/\"/" )]"'`)
(defpoll bluetooth-devices-table :interval "5s" "/home/jobe/git/dotfiles/eww/scripts/bluetooth-devices-table.sh")
(defpoll disk-usage :interval "30s" `df -h / | tail -n1 | awk '{print $5}' | sed 's/%//'`)
(defpoll disk-free :interval "30s" `df -h / | tail -n1 | awk '{print $4}'`)
(defpoll uptime :interval "60s" `uptime -p | sed 's/up //'`)
(defpoll cpu-temp :interval "2s" `sensors 2>/dev/null | grep -oP 'Core 0.*?\+\K[0-9.]+' | head -n1 || echo "0"`)
(defpoll load-average :interval "5s" `uptime | grep -oP 'load average: \K.*' | cut -d, -f1 || echo "0.0"`)